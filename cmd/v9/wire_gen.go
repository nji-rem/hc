// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"hc/api/packet"
	"hc/internal/connection"
	packet2 "hc/internal/packet"
	"sync"
)

// Injectors from wire.go:

func InitializeApp() *App {
	resolver := ProvideRouteResolver()
	wrapFunc := connection.ProvideMiddlewareWrapper()
	frontController := connection.ProvideFrontController(resolver, wrapFunc)
	repository := connection.ProvideSocketRepository(frontController)
	trafficParser := connection.ProvideTrafficParser()
	requestPool := connection.ProvideRequestPool()
	trafficManager := connection.ProvideTrafficManager(repository, trafficParser, requestPool)
	gameSocket := connection.ProvideGameSocket(repository, trafficManager)
	app := NewApp(gameSocket)
	return app
}

// wire.go:

var AppSet = wire.NewSet(connection.GameServerSet, ProvideRouteResolver, wire.Bind(new(packet.Resolver), new(*packet2.Resolver)))

var routeResolver *packet2.Resolver

var routeResolverOnce sync.Once

func ProvideRouteResolver() *packet2.Resolver {
	routeResolverOnce.Do(func() {
		routeResolver = packet2.NewResolver(CollectRoutes())
	})

	return routeResolver
}

func NewApp(server *connection.GameSocket) *App {
	return &App{GameServer: server}
}
