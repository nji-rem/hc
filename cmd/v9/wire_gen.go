// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/davecgh/go-spew/spew"
	"github.com/google/wire"
	routing2 "hc/api/routing"
	socket2 "hc/api/socket"
	"hc/cmd/v9/connection"
	"hc/pkg/routing"
	"hc/pkg/socket"
)

// Injectors from wire.go:

func InitializeApp() *App {
	repository := socket.ProvideSocketRepository()
	gameServer := socket.ProvideSocketServer(repository)
	routingRepository := routing.ProvideRepository()
	routeExecutor := routing.ProvideRouteExecutor(routingRepository)
	packetHandler := ProvidePacketHandler(routeExecutor)
	app := NewApp(repository, gameServer, routingRepository, packetHandler)
	return app
}

// wire.go:

var AppSet = wire.NewSet(socket.GameServerSet, routing.RouteSet, ProvidePacketHandler)

func ProvidePacketHandler(router *routing.RouteExecutor) connection.PacketHandler {
	return connection.PacketHandler{
		Router: router,
	}
}

func NewApp(gameConfigurator socket2.Configurator, server *socket.GameServer, routeRepository *routing.Repository, handler connection.PacketHandler) *App {

	gameConfigurator.Configure(func(connectionHandlers *[]socket2.ConnectionHandlerFunc, trafficHandlers *[]socket2.TrafficHandlerFunc) {
		*connectionHandlers = append(*connectionHandlers, connection.SayHelloToClientHandler)

		*trafficHandlers = append(*trafficHandlers, handler.Handle)
	})

	collectedRoutes := CollectRoutes()
	routeMap := make(map[string]routing2.Route, len(collectedRoutes))
	for _, route := range CollectRoutes() {
		routeMap[route.Name] = route
	}

	routeRepository.Routes = routeMap
	spew.Dump(routeRepository.Routes)

	return &App{GameServer: server}
}
