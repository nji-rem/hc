// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/jmoiron/sqlx"
	"github.com/rs/zerolog/log"
	"github.com/spf13/viper"
	"hc/api/config"
	"hc/api/packet"
	"hc/internal/connection"
	packet2 "hc/internal/packet"
	config2 "hc/pkg/config"
	"hc/pkg/database"
	"strconv"
	"sync"
)

import (
	_ "net/http/pprof"
)

// Injectors from wire.go:

func InitializeApp() *App {
	resolver := ProvideRouteResolver()
	wrapFunc := connection.ProvideMiddlewareWrapper()
	frontController := connection.ProvideFrontController(resolver, wrapFunc)
	repository := connection.ProvideSocketRepository(frontController)
	trafficParser := connection.ProvideTrafficParser()
	requestPool := connection.ProvideRequestPool()
	trafficManager := connection.ProvideTrafficManager(repository, trafficParser, requestPool)
	gameSocket := connection.ProvideGameSocket(repository, trafficManager)
	viper := ProvideConfig()
	app := NewApp(gameSocket, viper)
	return app
}

// wire.go:

var AppSet = wire.NewSet(connection.GameServerSet, ProvideRouteResolver,
	ProvideConfig, wire.Bind(new(packet.Resolver), new(*packet2.Resolver)), wire.Bind(new(config.Reader), new(*viper.Viper)), ProvideDatabase,
)

var (
	routeResolver     *packet2.Resolver
	routeResolverOnce sync.Once

	viperInstance *viper.Viper
	viperOnce     sync.Once

	databaseConnection     *sqlx.DB
	databaseConnectionOnce sync.Once
)

func ProvideRouteResolver() *packet2.Resolver {
	routeResolverOnce.Do(func() {
		routeResolver = packet2.NewResolver(CollectRoutes())
	})

	return routeResolver
}

func ProvideConfig() *viper.Viper {
	viperOnce.Do(func() {
		v, err := config2.Build(config2.WithEnvFile(".env"), config2.WithConfigDirectory("config/"))

		if err != nil {
			log.Fatal().Msgf("unable to initialize viper: %s", err.Error())
		}

		viperInstance = v
	})

	return viperInstance
}

func ProvideDatabase(config3 config.Reader) *sqlx.DB {
	databaseConnectionOnce.Do(func() {
		driver := config3.GetString("database.driver")
		if driver != "mysql" {
			log.Fatal().Msgf("Database driver '%s' is unsupported, you can only use 'mysql' at this moment")
		}

		port, err := strconv.Atoi(config3.GetString("database.drivers.mysql.port"))
		if err != nil {
			log.Fatal().Err(err)
		}

		conn, err := database.NewMySQLConnection(database.ConnectionInfo{
			Host:     config3.GetString("database.drivers.mysql.host"),
			User:     config3.GetString("database.drivers.mysql.user"),
			Password: config3.GetString("database.drivers.mysql.password"),
			Port:     port,
			DBName:   config3.GetString("database.drivers.mysql.dbname"),
		})
		log.Info().Msg("Configured database pool")

		databaseConnection = conn
	})

	return databaseConnection
}

func NewApp(server *connection.GameSocket, viper2 *viper.Viper) *App {
	return &App{GameServer: server, Config: viper2}
}
